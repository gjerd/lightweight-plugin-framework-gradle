/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'idea'
    id 'application'
}

group = 'org.javacentric'
version = '0.0.1'
project.ext.name = 'gradle-plugin-app'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'ch.qos.logback:logback-classic:1.2.9'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.javacentric.gjerd:common-api:0.0.8-SNAPSHOT'
    implementation 'org.javacentric.gjerd:lightweight-plugin-framework:0.0.8-SNAPSHOT'

    implementation 'org.apache.maven:maven-embedder:3.9.5'
    //implementation 'org.apache.maven.plugins:maven-invoker-plugin:3.6.0'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
}

//def appDestinationDirectory = System.getProperty("user.home") + File.separator +
//                              project.ext.name + File.separator + "lib"

def appDestinationDirectory = System.getProperty("user.home") +
        File.separator + "spades" +
        File.separator + project.ext.name;

def appDestinationLibDirectory = appDestinationDirectory + File.separator + "lib"
def appDestinationPluginsDirectory = appDestinationDirectory + File.separator + "plugins"

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.javacentric.App'
    mainClass = 'org.javacentric.MavenEmbed'
}


task copyJarsToDestinationDirectory {
    doLast {

        println appDestinationDirectory
        println appDestinationPluginsDirectory

        // It looks like alot of dependencies is included
        // here..? Is it better than we did in maven-plugin? Why do maven-plugin
        // distribute fewer?
        copy {
            from "${buildDir}/libs/${jar.archiveFileName.get()}"
            into appDestinationLibDirectory
        }

        copy {
            from(configurations.compileClasspath)
            into appDestinationLibDirectory
        }

        mkdir appDestinationPluginsDirectory
    }

}

task removeDestinationDirectory {
    doLast {
        delete appDestinationDirectory
    }
}

build.dependsOn copyJarsToDestinationDirectory
clean.dependsOn removeDestinationDirectory